<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing 2022-2</title><link>https://anfbalceroce.github.io/VisualComputing/</link><description>Recent content on Visual Computing 2022-2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anfbalceroce.github.io/VisualComputing/index.xml" rel="self" type="application/rss+xml"/><item><title>Ilusiones</title><link>https://anfbalceroce.github.io/VisualComputing/docs/taller-1/ilusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anfbalceroce.github.io/VisualComputing/docs/taller-1/ilusiones/</guid><description>Ilusiones # Introducción # Aquí se presentan cada una de las siguiente ilusiones con sus respectivas explicaciones sobre cómo funcionan, tratando de explicar porque se dan dichos fenómenos al analizar los diferentes componente de cada ilusiòn.
Steping Illusion # En esta ilusion se observan dos rectangulos de color amarillo y azul que se desplazan a lo largo de un patron de barras claras y oscuras. Cuando las condiciones de color y tamaño son adecuadas los rectangulos parecen moverse de manera intermitente, como si fueran pies caminando.</description></item><item><title>Múltiples Cámaras</title><link>https://anfbalceroce.github.io/VisualComputing/docs/taller-2/camaras/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anfbalceroce.github.io/VisualComputing/docs/taller-2/camaras/</guid><description>Múltiples Cámaras # Introducción - Descripción de la idea # Para este proyecto se tomo como referencia las cámaras de punto fijo de los juegos de Resident Evil clásicos en los que se jugaba con una cámara de punto fijo:
Tanto el punto de vista como el cambio en las transiciones
Se hizo uso de transformaciones en el espacio y de cámaras con quaterniones, los cuaterniones son muy ́utiles en la representación gráfica por ordenador, debido, entre otras cosas, a la posibilidad que ofrecen de representar con ellos rotaciones en el espacio tridimensional a través de los ángulos de Euler evitando el Gimbal Lock-Bloqueo del cardán.</description></item><item><title>Convolución</title><link>https://anfbalceroce.github.io/VisualComputing/docs/taller-1/convolucion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anfbalceroce.github.io/VisualComputing/docs/taller-1/convolucion/</guid><description>Marco Teorico # Convolución # 1. Identity: La mascara retorna la misma imagen
\[\begin{bmatrix} 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 1 &amp;amp; 0\\ 0 &amp;amp; 0 &amp;amp; 0 \end{bmatrix}\] 2. Sharpen: El núcleo de nitidez enfatiza las diferencias en los valores de píxeles adyacentes, lo que hace que la imagen parezca más vívida.
\[\begin{bmatrix} 0 &amp;amp; -1 &amp;amp; 0\\ -1 &amp;amp; 5 &amp;amp; -1\\ 0 &amp;amp; -1 &amp;amp; 0 \end{bmatrix}\] 3.</description></item></channel></rss>