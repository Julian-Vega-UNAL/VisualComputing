<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing 2022-2</title><link>https://anfbalceroce.github.io/VisualComputing/docs/taller-2/</link><description>Recent content on Visual Computing 2022-2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://anfbalceroce.github.io/VisualComputing/docs/taller-2/index.xml" rel="self" type="application/rss+xml"/><item><title>Múltiples Cámaras</title><link>https://anfbalceroce.github.io/VisualComputing/docs/taller-2/camaras/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anfbalceroce.github.io/VisualComputing/docs/taller-2/camaras/</guid><description>Múltiples Cámaras # Tecla Acción W,A,S,D Movimiento E Aumentar velocidad Q Disminuir velocidad Introducción - Descripción de la idea # Para este proyecto se tomo como referencia las cámaras de punto fijo de los juegos de Resident Evil clásicos en los que se jugaba con una cámara de punto fijo:
Tanto el punto de vista como el cambio en las transiciones
Se hizo uso de transformaciones en el espacio y de cámaras con quaterniones, los cuaterniones son muy ́utiles en la representación gráfica por ordenador, debido, entre otras cosas, a la posibilidad que ofrecen de representar con ellos rotaciones en el espacio tridimensional a través de los ángulos de Euler evitando el Gimbal Lock-Bloqueo del cardán.</description></item><item><title>Ejercicio Opcional</title><link>https://anfbalceroce.github.io/VisualComputing/docs/taller-2/W2_Optional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://anfbalceroce.github.io/VisualComputing/docs/taller-2/W2_Optional/</guid><description>Workshop 02 - Optional Exercises # Exercise # Implement in software any of the visualizations: primitive rasterization, color shading, z-depth, texture-mapping and/or anti-aliasing (requires a bit of research).
Primitive Rasterization + Color Shading # Press any key to switch between triangles
Implementation Details # Declarations # We declare a variable w that will be each pixel width and height. We declare a variable mid as w/2 to facilitate draawing lines from the center of a pixel.</description></item></channel></rss>