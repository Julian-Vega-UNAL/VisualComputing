[{"id":0,"href":"/VisualComputing/docs/contenido/convolucion/","title":"Convolucion","section":"Contenido","content":" Marco Teorico # Convolusiòn # 1. Identity: La mascara retorna la misma imagen\n\\[\\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 0\\\\ 0 \u0026amp; 1 \u0026amp; 0\\\\ 0 \u0026amp; 0 \u0026amp; 0 \\end{bmatrix}\\] 2. Sharpen: El núcleo de nitidez enfatiza las diferencias en los valores de píxeles adyacentes, lo que hace que la imagen parezca más vívida.\n\\[\\begin{bmatrix} 0 \u0026amp; -1 \u0026amp; 0\\\\ -1 \u0026amp; 5 \u0026amp; -1\\\\ 0 \u0026amp; -1 \u0026amp; 0 \\end{bmatrix}\\] 3. Emboss: Es una técnica de gráficos por computadora en la que cada píxel de una imagen se reemplaza por un resaltado o una sombra, según los límites claros/oscuros de la imagen original. Las áreas de bajo contraste se reemplazan por un fondo gris\n\\[\\begin{bmatrix} -2 \u0026amp; -1 \u0026amp; 0\\\\ -1 \u0026amp; 2 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 2 \\end{bmatrix}\\] 4. Outline:\n\\[\\begin{bmatrix} -1 \u0026amp; -1 \u0026amp; -1\\\\ -1 \u0026amp; 9 \u0026amp; -1\\\\ -1 \u0026amp; 1 \u0026amp; -1 \\end{bmatrix}\\] 5. Gaussian-blur: es el resultado de desenfocar una imagen por una función gaussiana (llamada así por el matemático y científico Carl Friedrich Gauss).\n\\[\\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 1\\\\ 2 \u0026amp; 4 \u0026amp; 1\\\\ 1 \u0026amp; 2 \u0026amp; 1 \\end{bmatrix}\\] El operador Sobel es utilizado en procesamiento de imágenes, especialmente en algoritmos de detección de bordes. Técnicamente es un operador diferencial discreto que calcula una aproximación al gradiente de la función de intensidad de una imagen. Para cada punto de la imagen a procesar, el resultado del operador Sobel es tanto el vector gradiente correspondiente como la norma de este vector.\n6. Left-sobel:\n\\[\\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; -1\\\\ 2 \u0026amp; 1 \u0026amp; -2\\\\ 1 \u0026amp; 0 \u0026amp; -1 \\end{bmatrix}\\] 7. Right-sobel:\n\\[\\begin{bmatrix} -1 \u0026amp; 0 \u0026amp; 1\\\\ -2 \u0026amp; 1 \u0026amp; 2\\\\ -1 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix}\\] 8. Top-sobel:\n\\[\\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 1\\\\ 0 \u0026amp; 1 \u0026amp; 0\\\\ -1 \u0026amp; -2 \u0026amp; -1 \\end{bmatrix}\\] 9. Botton-sobel:\n\\[\\begin{bmatrix} -1 \u0026amp; -2 \u0026amp; -1\\\\ 0 \u0026amp; 1 \u0026amp; 0\\\\ 1 \u0026amp; 2 \u0026amp; 1 \\end{bmatrix}\\] Ejercicio # Ejecuciòn Còdigo \u0026lt;img hidden id=\u0026#34;uploaded-image\u0026#34; src=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/img\u0026gt; \u0026lt;!--imagen subida, de ella se obtiene la representación binaria que luego es usada por el canvas para obtener la representación en RGBA --\u0026gt; \u0026lt;canvas hidden id=\u0026#34;canvas-for-rgba\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;!-- canvas solo para dibujar la imagen subida y obtener la representación en RGBA, por eso puede ser oculta --\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; id=\u0026#34;image-input\u0026#34; accept=\u0026#34;image/jpeg, image/png, image/jpg\u0026#34;\u0026gt; \u0026lt;select id=\u0026#34;kernel-select\u0026#34;\u0026gt; \u0026lt;option selected value=\u0026#34;identity\u0026#34;\u0026gt;Identity\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;gaussian-blur\u0026#34;\u0026gt;Gaussian Blur\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;sharpen\u0026#34;\u0026gt;Sharpen\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;outline\u0026#34;\u0026gt;Outline\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;emboss\u0026#34;\u0026gt;Emboss\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;left-sobel\u0026#34;\u0026gt;Left Sobel\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;right-sobel\u0026#34;\u0026gt;Right Sobel\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;top-sobel\u0026#34;\u0026gt;Top Sobel\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;bottom-sobel\u0026#34;\u0026gt;Bottom Sobel\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;canvas id=\u0026#34;transformed-image-canvas\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script\u0026gt; // función de procesamiento de la imagen function processImage(image, width, height) { let canvas = document.querySelector(\u0026#34;#canvas-for-rgba\u0026#34;); canvas.width = width; canvas.height = height; var ctx = canvas.getContext(\u0026#34;2d\u0026#34;); ctx.drawImage(image, 0, 0); var data = ctx.getImageData(0, 0, width, height).data; // data es un arreglo con los valores RGBA de la imagen (arreglo unidimensional) transformed_data = [] // es el arreglo transformado o procesado let ker = kernel(document.querySelector(\u0026#39;#kernel-select\u0026#39;).value) // kernel a usar for (let i = 0; i \u0026lt; data.length; i += 4) { // se itera de 4, i corresponde al valor R del pixel i-ésimo de la imagen let r = data[i]; let g = data[i + 1]; let b = data[i + 2]; let a = data[i + 3]; let pos = position(i, width, height) let nbs = neighbours(i, pos, width) let ws = weights(ker, pos) let sum = ws.reduce((partialSum, a) =\u0026gt; partialSum + a, 0); // en la matriz se debe garantizar que la suma de los pesos no sea cero para que funcione let rtotal = 0 let gtotal = 0 let btotal = 0 let atotal = 0 // suma ponderada para cada valor R G B A for (let j = 0; j \u0026lt; nbs.length; j++) { rtotal += data[nbs[j]] * ws[j] gtotal += data[nbs[j] + 1] * ws[j] btotal += data[nbs[j] + 2] * ws[j] atotal += data[nbs[j] + 3] * ws[j] } // se obtiene la suma ponderada: error cuando sum es cero ... let R = Math.round(rtotal / sum) let G = Math.round(gtotal / sum) let B = Math.round(btotal / sum) let A = Math.round(atotal / sum) // se agregan los nuevos valores al arreglo transformado transformed_data.push(R) transformed_data.push(G) transformed_data.push(B) transformed_data.push(A) } // se crea canvas de la imagen transformada para mostrarla en pantalla // nota: se necesita usar canvas para poder visualizar la imagen apartir del arreglo de R G B A canvas = document.querySelector(\u0026#34;#transformed-image-canvas\u0026#34;); canvas.width = width; canvas.height = height; ctx = canvas.getContext(\u0026#34;2d\u0026#34;); var imageData = canvas.getContext(\u0026#39;2d\u0026#39;).createImageData(width, height); imageData.data.set(transformed_data); ctx.putImageData(imageData, 0, 0) } // se procesa imagen cuando se sube archivo const image_input = document.querySelector(\u0026#34;#image-input\u0026#34;); image_input.addEventListener(\u0026#34;change\u0026#34;, function() { const reader = new FileReader(); reader.readAsDataURL(this.files[0]); reader.onload = (e) =\u0026gt; { const image = new Image(); image.src = e.target.result; image.onload = (e) =\u0026gt; { const width = e.target.width; const height = e.target.height; const uploaded_image = reader.result document.querySelector(\u0026#34;#uploaded-image\u0026#34;).src = uploaded_image; processImage(image, width, height) }; }; }); // se procesa imagen cuando se cambia el valor del select kernel const kernel_select = document.querySelector(\u0026#34;#kernel-select\u0026#34;); kernel_select.addEventListener(\u0026#34;change\u0026#34;, function() { const image = new Image(); let img = document.querySelector(\u0026#34;#uploaded-image\u0026#34;) image.src = img.src; let width = img.width let height = img.height console.log(image.src) processImage(image, width, height) }); // obtener posición del pixel según su índice y los valores weight y height let position = (i, w, h) =\u0026gt; { if (i == 0) return \u0026#39;top-left-corner\u0026#39;; else if (i == (w * 4) - 1) return \u0026#39;top-right-corner\u0026#39;; else if (i == h * ((w * 4) - 1)) return \u0026#39;bottom-left-corner\u0026#39;; else if (i == (h * w * 4) - 1) return \u0026#39;bottom-right-corner\u0026#39;; else if (i \u0026lt; (w * 4) - 1) return \u0026#39;top-row\u0026#39;; else if (i % (w * 4) == (w * 4) - 1) return \u0026#39;right-row\u0026#39;; else if (i \u0026gt; h * ((w * 4) - 1) \u0026amp;\u0026amp; i \u0026lt; (h * w * 4) - 1) return \u0026#39;bottom-row\u0026#39;; else if (i % (w * 4) == 0) return \u0026#39;left-row\u0026#39;; else return \u0026#39;inner-cell\u0026#39; } // arreglo de índices según posición, que será usado para obtener las posiciones de los pixeles vecinos (neighbours) y // las posiciones de los pesos de la matriz del kernel let indexes = (position) =\u0026gt; { if (position == \u0026#39;inner-cell\u0026#39;) return [0, 1, 2, 3, 4, 5, 6, 7, 8] else if (position == \u0026#39;left-row\u0026#39;) return [ 1, 2, 4, 5, 7, 8] else if (position == \u0026#39;right-row\u0026#39;) return [0, 1, 3, 4, 6, 7 ] else if (position == \u0026#39;top-row\u0026#39;) return [ 3, 4, 5, 6, 7, 8] else if (position == \u0026#39;bottom-row\u0026#39;) return [0, 1, 2, 3, 4, 5, ] else if (position == \u0026#39;top-right-corner\u0026#39;) return [ 3, 4, 6, 7 ] else if (position == \u0026#39;top-left-corner\u0026#39;) return [ 4, 5, 7, 8] else if (position == \u0026#39;bottom-left-corner\u0026#39;) return [ 1, 2, 4, 5 ] else if (position == \u0026#39;bottom-right-corner\u0026#39;) return [0, 1, 3, 4 ] else return [] } // arreglo con los índices de los pixeles vecinos let neighbours = (i, position, w) =\u0026gt; { let matrix = [i - (w * 4) - 4, i - (w * 4), i - (w * 4) + 4, i - 4, i , i + 4, i + (w * 4) - 4, i + (w * 4), i + (w * 4) + 4] let idx = indexes(position) let nbs = [] idx.forEach((i) =\u0026gt; { nbs.push(matrix[i]) }) return nbs } // kernels disponibles: cada matriz es una matriz de pesos let kernel = (kernel) =\u0026gt; { if (kernel == \u0026#39;identity\u0026#39;) return [0, 0, 0, 0, 1, 0, 0, 0, 0] else if (kernel == \u0026#39;gaussian-blur\u0026#39;) return [1, 2, 1, 2, 4, 1, 1, 2, 1] else if (kernel == \u0026#39;emboss\u0026#39;) return [-2, -1, 0, -1, 2, 1, 0, 1, 2] else if (kernel == \u0026#39;left-sobel\u0026#39;) return [1, 0, -1, 2, 1, -2, 1, 0, -1] else if (kernel == \u0026#39;right-sobel\u0026#39;) return [-1, 0, 1, -2, 1, 2, // se agregó 1 en la posición central para garantizar que suma de pesos no sea cero -1, 0, 1] else if (kernel == \u0026#39;top-sobel\u0026#39;) return [1, 2, 1, 0, 1, 0, -1, -2, -1] else if (kernel == \u0026#39;bottom-sobel\u0026#39;) return [-1, -2, -1, 0, 1, 0, 1, 2, 1] else if (kernel == \u0026#39;sharpen\u0026#39;) return [0, -1, 0, -1, 5, -1, 0, -1, 0] else if (kernel == \u0026#39;outline\u0026#39;) return [-1, -1, -1, -1, 9, -1, -1, 1, -1] else return [] } // arreglo de pesos que se usarán en la suma ponderada del pixel actual: depende del kernel y de la posición del pixel let weights = (ker, position) =\u0026gt; { let idx = indexes(position) let ws = [] idx.forEach((i) =\u0026gt; { ws.push(ker[i]) }) return ws } \u0026lt;/script\u0026gt; "},{"id":1,"href":"/VisualComputing/docs/contenido/ilusiones/","title":"Ilusiones","section":"Contenido","content":" Ilusiones # Introducciòn # Aquí se presentan cada una de las siguiente ilusiones con sus respectivas explicaciones sobre cómo funcionan, tratando de explicar porque se dan dichos fenómenos al analizar los diferentes componente de cada ilusiòn.\nSteping Illusion # En esta ilusion se observan dos rectangulos de color amarillo y azul que se desplazan a lo largo de un patron de barras claras y oscuras. Cuando las condiciones de color y tamaño son adecuadas los rectangulos parecen moverse de manera intermitente, como si fueran pies caminando.\nCuando el pie amarillo tiene un brillo similar a las barras claras, y el pie azul un brillo similar a las barras oscuras (caso extremo cuando son del mismo color y suficiente contraste entre los claros y los oscuros) solo hay evidencia clara de movimiento cuando los extremos del rectangulo claro pasan sobre una barra oscura o los del rectangulo oscuro pasan sobre una barra clara, efectivamente la mitad del espacio. En la otra mitad no (claro en claro o oscuro en oscuro) no es evidente el movimiento por lo que el cerebro asume que no hay movimiento (por defecto si algo no está en movimiento, entonces está en reposo).\nEste fenómeno también explica otra posible ilusión, que no se vean los rectángulos caminando si no oscilando, como un gusano. Esto se logra cuando la razón entre el largo del rectángulo y el ancho de las barras es un número impar (un número par causa la ilusión de caminar).\nAutor: Tomado de https://michaelbach.de/ot/mot-feetLin/index.htmlm, Autor: Michael Bach\nCòdigo let barWidth; let x = 0; let feetWidth; let feetHeight; let feetDistance; let speed; let direction = 1; let barWidthSlider; let feetWidthSlider; let feetHeightSlider; let feetDistanceSlider; let speedSlider; const labels = [\u0026#34;Ancho\\nBarras\u0026#34;,\u0026#34;Longitud\\nPies\u0026#34;,\u0026#34;Ancho\\nPies\u0026#34;,\u0026#34;Distancia\\nPies\u0026#34;,\u0026#34;Velocidad\u0026#34;]; function setup() { createCanvas(450, 380); frameRate(60); colorMode(HSB); barWidthSlider = createSlider(5, 50, 25); barWidthSlider.position(5, 310); barWidthSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); feetWidthSlider = createSlider(5, 150, 100); feetWidthSlider.position(90, 310); feetWidthSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); feetHeightSlider = createSlider(5, 0.5*(height-80), 25); feetHeightSlider.position(175, 310); feetHeightSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); feetDistanceSlider = createSlider(0, (height-80), 40); feetDistanceSlider.position(260, 310); feetDistanceSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); speedSlider = createSlider(0, 300, 100); speedSlider.position(345, 310); speedSlider.style(\u0026#39;width\u0026#39;, \u0026#39;80px\u0026#39;); } function draw() { speed = direction * speedSlider.value()/100; barWidth = barWidthSlider.value(); if (x + feetWidthSlider.value() \u0026lt;= width){ feetWidth = feetWidthSlider.value(); } feetHeight = feetHeightSlider.value(); if (feetDistanceSlider.value() \u0026lt;= (height-80)-2*feetHeight){ feetDistance = feetDistanceSlider.value(); }else{ feetDistance = (height-80)-2*feetHeight; } background(0,0,98); stroke(0,0,0); fill(0,0,0); for (let i = 0; i \u0026lt; width; i = i + 2 * barWidth) { rect(i,0,barWidth,(height-80)); } stroke(60,100,100); fill(60,100,100); rect(x,(0.5*(height-80))-feetHeight-0.5*feetDistance,feetWidth,feetHeight); stroke(240,100,40); fill(240,100,40); rect(x,(0.5*(height-80))+0.5*feetDistance,feetWidth,feetHeight); x = x + speed; if (x \u0026gt;= width-feetWidth) { direction = -1; } if (x \u0026lt;= 0) { direction = 1; } stroke(0,0,100); fill(0,0,100); rect(0,300,width,80); textSize(16); textAlign(CENTER); stroke(0,0,0); fill(0,0,0); text(labels[0], 45, 347); text(labels[1], 130, 347); text(labels[2], 215, 347); text(labels[3], 300, 347); text(labels[4], 385, 347); } Complementary Colors # Existe algo llamado \u0026ldquo;imagen remanente retiniana negativa\u0026rdquo;. Se vuelve visible cuando un tono determinado permanece en la misma posición de la retina durante varios segundos (por lo general, moveríamos los ojos 3 veces por segundo, por lo que esto no es una desventaja en la visualización normal). La imagen remanente se acumula a medida que esa ubicación retiniana se adapta a este tono especial, y al mirar un fondo neutro se ve el color complementario. Investigaciones recientes han localizado de manera convincente las células ganglionares de la retina como sustrato neural para la imagen residual (Zaidi et al. 2012).\nEsto es algo bueno, normalmente, porque ayuda a la \u0026ldquo;constancia del color\u0026rdquo;, es decir, vemos colores algo independientes de la iluminación ambiental (compare el sol glaciar azulado del mediodía con un tinte rojizo en la sala de estar junto a la chimenea).\nEntonces la imagen residual está \u0026ldquo;grabada\u0026rdquo;, lo que significa que la ubicación de la retina está adaptada. Ahora el parche magenta cambia repentinamente a gris. Por la adaptación, ahora se ve el color complementario, que sería el verde para el magenta, o el gris claro para un gris oscuro.\nLa imagen residual de la retina generalmente se desvanece rápidamente (en unos pocos segundos en condiciones normales). Pero aquí este desvanecimiento no reduce la percepción de la imagen remanente, porque se descubre una nueva justo después en la siguiente ubicación.\nAdemás, un efecto Gestalt, aquí entra en juego el \u0026ldquo;fenómeno phi\u0026rdquo;: la imagen residual de las sucesivas ubicaciones retinianas se integra y se percibe como un solo objeto en movimiento, a saber, el disco verde.\nEn resumen, los siguientes factores hacen que esta ilusión sea bastante convincente:\nEs bastante fácil fijarse constantemente en el centro La mayoría de las veces, las ubicaciones de la retina se readaptan y la imagen remanente se descubre solo brevemente Un efecto Gestalt conduce a la percepción de un disco verde volador. Tomado de https://michaelbach.de/ot/col-lilacChaser/index.html, Autor: Michael Bach\nCòdigo let colors = []; let maincolor let flag = false; let select function setup() { createCanvas(500, 500); angleMode(DEGREES); select = createSelect(); select.option(\u0026#39;magenta\u0026#39;); select.option(\u0026#39;yellow\u0026#39;); select.option(\u0026#39;cyan\u0026#39;); select.option(\u0026#39;red\u0026#39;); select.option(\u0026#39;blue\u0026#39;); select.option(\u0026#39;green\u0026#39;); select.option(color(255, 216, 255)); /* magenta with 15% saturation */ select.option(color(255, 255, 216)); /* yellow with 15% saturation */ select.option(color(216, 255, 255)); /* cyan with 15% saturation */ select.changed(selectEvent); maincolor = select.value() colors = [color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor), color(maincolor)] } function draw() { background(240); strokeWeight(1); noStroke(); fill(240); circle(250, 250, 400); let p0 = createVector(450, 250); let p30 = createVector(cos(30)*200 + 200 + 50, (1-sin(30))*200 + 50); let p60 = createVector(cos(60)*200 + 200 + 50, (1-sin(60))*200 + 50); let p90 = createVector(250, 50); let p120 = createVector((1-(-cos(120)))*200 + 50, (1-sin(120))*200 + 50); let p150 = createVector((1-(-cos(150)))*200 + 50, (1-sin(150))*200 + 50); let p180 = createVector(50, 250); let p210 = createVector((1-(-cos(210)))*200 + 50, -sin(210)*200 + 200 + 50); let p240 = createVector((1-(-cos(240)))*200 + 50, -sin(240)*200 + 200 + 50); let p270 = createVector(250, 450); let p300 = createVector(cos(300)*200 + 200 + 50, -sin(300)*200 + 200 + 50); let p330 = createVector(cos(330)*200 + 200 + 50, -sin(330)*200 + 200 + 50) point(p0); point(p30); point(p60); point(p90); point(p120); point(p150); point(p180); point(p210); point(p240); point(p270); point(p300); point(p330); noStroke(); fill(colors[0]); circle(p0.x, p0.y, 60); fill(colors[1]); circle(p30.x, p30.y, 60); fill(colors[2]); circle(p60.x, p60.y, 60); fill(colors[3]); circle(p90.x, p90.y, 60); fill(colors[4]); circle(p120.x, p120.y, 60); fill(colors[5]); circle(p150.x, p150.y, 60); fill(colors[6]); circle(p180.x, p180.y, 60); fill(colors[7]); circle(p210.x, p210.y, 60); fill(colors[8]); circle(p240.x, p240.y, 60); fill(colors[9]); circle(p270.x, p270.y, 60); fill(colors[10]); circle(p300.x, p300.y, 60); fill(colors[11]); circle(p330.x, p330.y, 60); strokeWeight(10); stroke(1) point(250, 250) if (flag == false) go(); flag = true; } async function go() { for (let i = 0; i \u0026lt; colors.length; i++) { await sleep(200); if (i == 0) colors[colors.length - 1] = color(maincolor); else colors[i-1] = color(maincolor); colors[i] = color(240); } flag = false; } function selectEvent() { maincolor = select.value() } function sleep(ms) { return new Promise(resolve =\u0026gt; setTimeout(resolve, ms)); } Spinning Ellipses # El efecto consiste en una ilusión de movimiento, dado que es una serie de elipses que gira respecto a otro a una razón de 0.003 grados se crea un \u0026ldquo;puente\u0026rdquo; entre elipses, que a su vez crea un arco con el borde exterior de los elipses conectados subsecuentemente, mirando el punto central se puede ver como se crean dos patrones de espiral, lo que a su vez al estar rotando da esta espiral \u0026ldquo;hipnótica\u0026rdquo;. Si se mira durante un tiempo y luego se mira un fondo blanco dejará una impresión en la visión como de un halo alrededor de donde se encontraba el punto central.\nTomado de: https://youtu.be/xlPWCrjQsTE, Autor: Computing Masterclass\nCòdigo let angle = 0; function setup() { createCanvas(500, 500); strokeWeight(4); } function draw() { background(50); noStroke() fill(255,255,255) ellipse(width/2, height/2,10,10) for(let i = 15; i\u0026lt;500; i+=15){ push() //Empieza un nuevo dibujo translate(width/2,height/2) rotate(i+angle *2) noFill() stroke(i, i+100, 200) ellipse(0,0,i+20,i) //reemplazado i por slider.value pop() angle += 0.0003 } } function changeColor(){ background(bgcolor) } Moving Dots # El efecto consiste en una ilusión de movimiento, debido a que cada círculo contiene dos arcos de colores similares en movimiento de traslación sobre el mismo círculo, el ojo, al fijar su visión central solo en un punto o zona de toda la imagen, provoca que la visión periférica al captar el resto de la imagen, se dé un efecto de movimiento sobre los círculos, como si estuvieran bailando y moviéndose en forma de onda, a pesar de que el círculo central se encuentre siempre sin moverse, esto debido al movimiento contrario entre ambos arcos y que esten colocados de tal modo que, en cierto punto de rotaciòn, el circulo central queda expuesto a la zona exterior, provocando que la otra zona, con ambos arcos uno encima de otro, se vea como un circulo sin un pedazo\nTomado de : https://youtu.be/BQbrx6V0jTs, Autor: Computing Masterclass\nCòdigo let angle = 0; function setup() { createCanvas(700, 700); } function draw() { background(50); for (let i = 50; i \u0026lt; width - 45; i += 50) { for (let j = 50; j \u0026lt; height - 45; j += 50) { push() fill(0, 168, 0); stroke(0, 0, 150); strokeWeight(3); ellipse(i, j, 25, 25); pop() push() translate(i, j); rotate(HALF_PI + i - angle * 3) stroke(0, 168, 168); strokeWeight(3); noFill(); arc(0, 0, 30, 30, 0, PI) pop() push() translate(i, j); rotate(QUARTER_PI * j + angle * 4) stroke(0, 255, 255); strokeWeight(3); noFill(); arc(0, 0, 25, 25, PI , 0) pop() angle += 0.0005 } } } Conclusiones # Las ilusiones ópticas son efectos que logran engañar nuestro cerebro provocando que veamos cosas que no necesariamente ocurren de dicho modo, en este caso se presentaron, a través de ilusiones generada con código en p5 sin truco\nLas ilusiones opticas presentadas en su mayoria basadas en movimiento provocaron que los ojos humanos viera fenomenos difernetes a como se ejecutaban en realidad, esto debido a interpretaciones de nuestro cerebro ante diferens circunstacias que cambiaban por difernetes cirucunstacias, en el primero provcada por el fondo, en el segundo por el cambio de color sucesivo de los circulos de color rosa, el tercero por el movimiento y la sobreposicion de algunos arcos sobre otros, y el ultimo por el movimiento translacional de los dos arcos exteriores a los circulos\nReferences # Steping Illusion, Autor: Muchael Bach, Tomado de https://michaelbach.de/ot/mot-feetLin/index.html Complementary Colors, Autor: Michael Bach, Tomado de https://michaelbach.de/ot/col-lilacChaser/index.html Spinning Ellipses, Autor: Computing Masterclass, Tomado de: https://youtu.be/xlPWCrjQsTE Moving Dots, Autor: Computing Masterclass, Tomado de : https://youtu.be/BQbrx6V0jTs "}]